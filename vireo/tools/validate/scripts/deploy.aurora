import os

class Profile(Struct):
  role              = Default(String, os.environ['USER'])
  environment       = Default(String, "devel")
  name              = Default(String, "validate-" + os.environ['CPUs'])
  package           = Default(String, "{{name}}")
  version           = Default(String, "latest")
  config            = Required(String)
  flags             = Default(String, "")

resources = Resources(cpu = os.environ['CPUs'], ram = 500*MB, disk = 1*GB)

install = Packer.install(
  name = '{{profile.package}}',
  role = '{{profile.role}}',
  version = '{{profile.version}}'
)

run = Process(
  name = '{{profile.name}}',
  cmdline = 'time cat 720-30s.mp4 | ./validate -threads 0 ;\
             time cat 720-30s.mp4 | ./validate -threads 2 ;\
             time cat 720-30s.mp4 | ./validate -threads 4 ;\
             time cat 720-30s.mp4 | ./validate -threads 8  ;\
             time cat 720-30s.mp4 | ./validate -threads 16 ')

server_task = Task(
  name = "install",
  processes = [
    install,
    Stats(),
    run
  ],
  resources = resources,
  constraints = order(install, run)
)

service = Job(
  role = '{{profile.role}}',
  environment = '{{profile.environment}}',
  name = '{{profile.name}}',
  contact = '{{role}}@twitter.com',
  service = '{{production}}',
  announce = Announcer(primary_port='http', portmap={'aurora': 'http'}),
  update_config = UpdateConfig(
    batch_size = 30,
    restart_threshold = 90,
    watch_secs = 60
  ),
  health_check_config = HealthCheckConfig(initial_interval_secs = 30),
  task = server_task,
	instances = 1
)

Devel = Profile(config = "com.twitter.{{name}}.Main")
jobs = []
dcs = ["smf1", "atla"]

jobs += [service(cluster = dc).bind(profile = Devel) for dc in dcs]
